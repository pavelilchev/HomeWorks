mber
0	1	1	1	1	1	1	1	1	1	1	1023
1	1	1	1	1	1	1	1	1	1	1	1023
2	1	1	0	0	0	0	0	1	1	1	775
3	1	1	0	0	0	0	0	1	1	1	775
4	1	1	0	0	0	0	0	1	1	1	775
5	1	1	0	0	0	0	0	1	1	1	775
6	1	1	0	0	0	0	0	1	1	1	775
7	1	1	1	1	1	1	1	1	1	1	1023
8	1	1	1	1	1	1	1	1	1	1	1023
9	1	1	1	1	1	1	1	1	1	1	1023
 	 	 	 	 	 	 	 	sum = 	8990
Input	Output
4 5 2
End	8990
	
Input	Output
1 2 5	5118
3 3 1	
0 6 4	
0 0 0	
8 9 2	
1 7 2	
End	

Problem 11.	* Couples Frequency
This problem is from the Java Basics Exam (26 May 2014). You can test your solution here.
Write a program that reads a sequence of n integers and calculates and prints the frequencies of all couples of two consecutive numbers. For example, for the input sequence { 3 4 2 3 4 2 1 12 2 3 4 }, we have 10 couples (6 distinct), shown on the right with their occurrence counts and frequencies (in percentage).
Couple	Occurrences	Percentage
3 4	3 times	30.00%
4 2	2 times	20.00%
2 3	2 times	20.00%
2 1	1 times	10.00%
1 12	1 times	10.00%
12 2	1 times	10.00%
Input
The input data should be read from the console. At the first line, we have the input sequence of integers, separated by a space.
The input data will always be valid and in the format described. There is no need to check it explicitly.
Output
Print all distinct couples of two consecutive numbers (without duplicates) found in the input sequence (from left to right) along with their frequency of appearance in the input sequence (in percentages, with two decimal digits, with traditional rounding). Use the format: "couple -> percentage" (see the examples below). Beware of formatting!
Constraints
•	All input numbers will be integers in the range [-100 000 … 100 000].
•	The count of the numbers will be in the range [2..1000].
•	Time limit: 0.5 sec. Memory limit: 16 MB.
Examples
Input		Input		Input
3 4 2 3 4 2 1 12 2 3 4		5 10 5 10 10 5 5 10 5 10 10 5		10 20 10 10 10
Output		Output		Output
3 4 -> 30.00%
4 2 -> 20.00%
2 3 -> 20.00%
2 1 -> 10.00%
1 12 -> 10.00%
12 2 -> 10.00%		5 10 -> 36.36%
10 5 -> 36.36%
10 10 -> 18.18%
5 5 -> 9.09%		10 20 -> 25.00%
20 10 -> 25.00%
10 10 -> 50.00%
Problem 12.	* Labyrinth Dash
This problem is from the Java Basics (11 May 2015). You can test your solution here.
Enough hard problems. Let’s play a game! You will be given the layout of a labyrinth (a two-dimensional array) and a series of moves. Your task is to navigate the labyrinth and print the outcome of each move.
On the first line of input you will be given the number N representing the count of rows of the labyrinth. On each of the next N lines you will receive a string containing the layout of the given row. On the last line of input you will receive a string containing the moves you need to make. Each move will be one of the following symbols: "v" (move down), "^" (move up), "<" (move left) or ">" (move right). The string will not contain any other characters.
The player starts with 3 lives and begins the journey at position (0, 0). When you make a move, there can be several different outcomes: 1) Hit a wall – a wall is represented by the symbols "_" (underscore) and "|" (pipe). Hitting a wall means the player stays in place; in this case you should print on the console “Bumped a wall.” 2) Land on an obstacle – obstacles are the following symbols: "@", "#", "*". If you move to a position containing one of these symbols the player loses a life point and you should print "Ouch! That hurt! Lives left: X" on the console. If the player is left with 0 lives, the game ends and you should print "No lives left! Game Over!" 3) Get a new life – when you land on the symbol "$" the player receives an additional life point. Print "Awesome! Lives left: X" on the console. Additional lives ('$') are removed once the player passes through the cell (i.e. they are replaced with dots). 4) Drop out of the labyrinth – if you land on an empty cell (one containing a space), or outside the boundaries of the array, the game ends and you should print "Fell off a cliff! Game Over!" 5) Land on the symbol "." (dot) – move the player to the new pos